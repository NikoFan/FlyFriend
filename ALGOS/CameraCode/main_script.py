'''
pip install opencv-python - –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–∞–º–µ—Ä–æ–π
pip install opencv-contrib-python
pip install pioneer-sdk - –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥—Ä–æ–Ω–æ–º
pip install imutils - –î–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
pip install pyzbar
links:
–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è
https://pyimagesearch.com/2015/01/19/find-distance-camera-objectmarker-using-python-opencv/

–ö–Ω–∏–≥–∞
https://www.pyimagesearch.com/static/cv_dl_resource_guide.pdf
'''
import cv2
import numpy as np
from pyzbar import pyzbar
import sys

# === –ö–ê–õ–ò–ë–†–û–í–ö–ê ===
REAL_QR_WIDTH_CM = 5.0        # ‚Üê –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –≤–∞—à–µ–≥–æ QR (–≤ —Å–º)
KNOWN_DISTANCE_CM = 50.0      # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –∫–∞–ª–∏–±—Ä–æ–≤–∫–µ (—Å–º)
REF_QR_WIDTH_PX = 100         # –®–∏—Ä–∏–Ω–∞ QR –≤ –ø–∏–∫—Å–µ–ª—è—Ö –Ω–∞ –∫–∞–ª–∏–±—Ä–æ–≤–æ—á–Ω–æ–º —Ñ–æ—Ç–æ

FOCAL_LENGTH = (REF_QR_WIDTH_PX * KNOWN_DISTANCE_CM) / REAL_QR_WIDTH_CM

QR_CONTENT = "PHONE_TRACKER"
CENTER_TOLERANCE = 80

# === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–ú–ï–†–´ ===
print("üì∑ –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É...")
cap = cv2.VideoCapture(0)

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–∞–º–µ—Ä—ã
if not cap.isOpened():
    print("‚ùå –û–®–ò–ë–ö–ê: –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –∫–∞–º–µ—Ä—É (–∏–Ω–¥–µ–∫—Å 0).")
    print("   –í–æ–∑–º–æ–∂–Ω–æ, –∫–∞–º–µ—Ä–∞ –∑–∞–Ω—è—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
    sys.exit(1)

# –ü—Ä–æ–±—É–µ–º –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä–≤—ã–π –∫–∞–¥—Ä
print("üì∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–¥—Ä–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è...")
ret, test_frame = cap.read()
if not ret or test_frame is None:
    print("‚ùå –û–®–ò–ë–ö–ê: –ö–∞–º–µ—Ä–∞ –æ—Ç–∫—Ä—ã—Ç–∞, –Ω–æ –∫–∞–¥—Ä –Ω–µ –ø–æ–ª—É—á–µ–Ω.")
    cap.release()
    sys.exit(1)

FRAME_H, FRAME_W = test_frame.shape[:2]
CENTER_X, CENTER_Y = FRAME_W // 2, FRAME_H // 2
print(f"‚úÖ –ö–∞–º–µ—Ä–∞ –≥–æ—Ç–æ–≤–∞. –†–∞–∑—Ä–µ—à–µ–Ω–∏–µ: {FRAME_W}x{FRAME_H}")

# === –û–°–ù–û–í–ù–û–ô –¶–ò–ö–õ ===
try:
    while True:
        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å –∫–∞–º–µ—Ä—ã
        ret, frame = cap.read()
        if not ret or frame is None:
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω –∫–∞–¥—Ä. –ü—Ä–æ–¥–æ–ª–∂–∞—é...")
            continue

        # –†–∏—Å—É–µ–º —Å–µ—Ç–∫—É –∑–æ–Ω
        cv2.line(frame, (CENTER_X, 0), (CENTER_X, FRAME_H), (255, 255, 255), 1)
        cv2.line(frame, (0, CENTER_Y), (FRAME_W, CENTER_Y), (255, 255, 255), 1)

        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º QR
        decoded = pyzbar.decode(frame)
        found = False

        for obj in decoded:
            try:
                data = obj.data.decode("utf-8")
                if data == QR_CONTENT:
                    found = True
                    x, y, w, h = obj.rect
                    cx, cy = x + w // 2, y + h // 2

                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∑–æ–Ω—É
                    if abs(cx - CENTER_X) < CENTER_TOLERANCE and abs(cy - CENTER_Y) < CENTER_TOLERANCE:
                        zone_text = "Center"
                    else:
                        dx = 1 if cx > CENTER_X else -1
                        dy = 1 if cy < CENTER_Y else -1
                        zone_map = {(1,1): "I", (-1,1): "II", (-1,-1): "III", (1,-1): "IV"}
                        zone_text = f"Zone {zone_map.get((dx, dy), '?')}"

                    # –†–∞—Å—Å—Ç–æ—è–Ω–∏–µ
                    dist = (REAL_QR_WIDTH_CM * FOCAL_LENGTH) / w if w > 0 else 0

                    # –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è
                    cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
                    cv2.circle(frame, (cx, cy), 6, (0, 0, 255), -1)
                    cv2.putText(frame, f"Range: {dist:.1f} cm", (x, y - 30),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 255), 2)
                    cv2.putText(frame, zone_text, (x, y - 10),
                                cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 0, 0), 2)
                    break
            except Exception as e:
                print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ QR: {e}")
                continue

        if not found:
            cv2.putText(frame, "Show QR-code", (50, 50),
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 0, 255), 2)

        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∫–∞–¥—Ä
        cv2.imshow("Phone Tracker", frame)

        # –í—ã—Ö–æ–¥ –ø–æ 'q'
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break

except KeyboardInterrupt:
    print("\nüõë –ü—Ä–µ—Ä–≤–∞–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

finally:
    print("üßπ –û—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–æ–≤...")
    cap.release()
    cv2.destroyAllWindows()